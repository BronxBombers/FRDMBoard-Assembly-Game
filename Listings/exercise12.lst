


ARM Macro Assembler    Page 1 Lab Exercise Ten: Timer Driver Input Timing


    1 00000000                 TTL              Lab Exercise Ten: Timer Driver 
Input Timing
    2 00000000         ;*******************************************************
                       *********
    3 00000000         ;This program takes in inputs from the user for their na
                       me, the 
    4 00000000         ;date, and the last name of a TA for the lab section. Fo
                       r each
    5 00000000         ;of those inputs, the user is timed to see how long it t
                       ook them
    6 00000000         ;to enter those inputs. The total time it took them for 
                       each input
    7 00000000         ;is printed to the screen after they hit the enter key t
                       o confirm
    8 00000000         ;the input. 
    9 00000000         ;Name:  Matthew Rigby
   10 00000000         ;Date:  11/13/17
   11 00000000         ;Class:  CMPE-250
   12 00000000         ;Section:  Lab Section 01, Wednesday's from 5:30PM - 7:3
                       0PM
   13 00000000         ;-------------------------------------------------------
                       --------
   14 00000000         ;Keil Template for KL46
   15 00000000         ;R. W. Melton
   16 00000000         ;September 25, 2017
   17 00000000         ;*******************************************************
                       *********
   18 00000000         ;Assembler directives
   19 00000000                 THUMB
   21 00000000         ;*******************************************************
                       *********
   22 00000000         ;Include files
   23 00000000                 GET              MKL46Z4.s   ;Included by start.
                                                            s
   25 00000000         ;*******************************************************
                       *********
   26 00000000         ;EQUates
   27 00000000 0000004F 
                       MAX_STRING
                               EQU              79          ;Variable MAX_STRIN
                                                            G is equal to the n
                                                            umber 79
   28 00000000 0000001A 
                       LETTERS EQU              26          ;Variable LETTERS i
                                                            s equal to the numb
                                                            er 26
   29 00000000         
   30 00000000 00001000 
                       NVIC_ICPR_UART0_MASK
                               EQU              UART0_IRQ_MASK
   31 00000000 00000003 
                       UART0_IRQ_PRIORITY
                               EQU              3
   32 00000000 000000C0 
                       NVIC_IPR_UART0_MASK
                               EQU              (3 << UART0_PRI_POS)
   33 00000000 000000C0 
                       NVIC_IPR_UART0_PRI_3
                               EQU              (UART0_IRQ_PRIORITY << UART0_PR



ARM Macro Assembler    Page 2 Lab Exercise Ten: Timer Driver Input Timing


I_POS)
   34 00000000 00001000 
                       NVIC_ISER_UART0_MASK
                               EQU              UART0_IRQ_MASK
   35 00000000 0000002C 
                       UART0_C2_T_RI
                               EQU              (UART0_C2_RIE_MASK :OR: UART0_C
2_T_R)
   36 00000000 000000AC 
                       UART0_C2_TI_RI
                               EQU              (UART0_C2_TIE_MASK :OR: UART0_C
2_T_RI)
   37 00000000         
   38 00000000 00000000 
                       IN_PTR  EQU              0
   39 00000000 00000004 
                       OUT_PTR EQU              4
   40 00000000 00000008 
                       BUF_STRT
                               EQU              8
   41 00000000 0000000C 
                       BUF_PAST
                               EQU              12
   42 00000000 00000010 
                       BUF_SIZE
                               EQU              16
   43 00000000 00000011 
                       NUM_ENQD
                               EQU              17
   44 00000000         
   45 00000000 00000004 
                       Q_BUF_SZ
                               EQU              4
   46 00000000 00000012 
                       Q_REC_SZ
                               EQU              18
   47 00000000         
   48 00000000 00000050 
                       TR_BUF_SZ
                               EQU              80
   49 00000000         
   50 00000000         
   51 00000000         
   52 00000000         ;For Port D
   53 00000000 00000100 
                       PTD5_MUX_GPIO
                               EQU              (1 << PORT_PCR_MUX_SHIFT)
   54 00000000 01000100 
                       SET_PTD5_GPIO
                               EQU              (PORT_PCR_ISF_MASK :OR: PTD5_MU
X_GPIO)
   55 00000000         
   56 00000000         ;For Port E
   57 00000000 00000100 
                       PTE29_MUX_GPIO
                               EQU              (1 << PORT_PCR_MUX_SHIFT)
   58 00000000 01000100 
                       SET_PTE29_GPIO
                               EQU              (PORT_PCR_ISF_MASK :OR: PTE29_M



ARM Macro Assembler    Page 3 Lab Exercise Ten: Timer Driver Input Timing


UX_GPIO)
   59 00000000         
   60 00000000 0000001D 
                       POS_RED EQU              29
   61 00000000 00000005 
                       POS_GREEN
                               EQU              5
   62 00000000         
   63 00000000 20000000 
                       LED_RED_MASK
                               EQU              (1 << POS_RED)
   64 00000000 00000020 
                       LED_GREEN_MASK
                               EQU              (1 << POS_GREEN)
   65 00000000         
   66 00000000 00000020 
                       LED_PORTD_MASK
                               EQU              LED_GREEN_MASK
   67 00000000 20000000 
                       LED_PORTE_MASK
                               EQU              LED_RED_MASK
   68 00000000         
   69 00000000         
   70 00000000         ;SIM_SCGC6_PIT_MASK  
   71 00000000 00000000 
                       PIT_IRQ_PR1
                               EQU              0           ;Highest pR1oR1ty
   72 00000000 00000001 
                       PIT_MCR_EN_FRZ
                               EQU              PIT_MCR_FRZ_MASK
   73 00000000 0003A97F 
                       PIT_LDVAL_10ms
                               EQU              239999
   74 00000000 00000003 
                       PIT_TCTRL_CH_IE
                               EQU              (PIT_TCTRL_TIE_MASK :OR: PIT_TC
TRL_TEN_MASK)
   75 00000000         
   76 00000000         ;-------------------------------------------------------
                       --------
   77 00000000         ;PORTx_PCRn (Port x pin control register n [for pin n])
   78 00000000         ;___->10-08:Pin mux control (select 0 to 8)
   79 00000000         ;Use provided PORT_PCR_MUX_SELECT_2_MASK
   80 00000000         ;-------------------------------------------------------
                       --------
   81 00000000         ;Port A
   83 00000000 01000200 
                       PORT_PCR_SET_PTA1_UART0_RX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
   85 00000000 01000200 
                       PORT_PCR_SET_PTA2_UART0_TX
                               EQU              (PORT_PCR_ISF_MASK :OR:       
                             PORT_PCR_MUX_SELECT_2_MASK)
   86 00000000         ;-------------------------------------------------------
                       --------
   87 00000000         ;SIM_SCGC4
   88 00000000         ;1->10:UART0 clock gate control (enabled)
   89 00000000         ;Use provided SIM_SCGC4_UART0_MASK



ARM Macro Assembler    Page 4 Lab Exercise Ten: Timer Driver Input Timing


   90 00000000         ;-------------------------------------------------------
                       --------
   91 00000000         ;SIM_SCGC5
   92 00000000         ;1->09:Port A clock gate control (enabled)
   93 00000000         ;Use provided SIM_SCGC5_PORTA_MASK
   94 00000000         ;-------------------------------------------------------
                       --------
   95 00000000         ;SIM_SOPT2
   96 00000000         ;01=27-26:UART0SRC=UART0 clock source select
   97 00000000         ;         (PLLFLLSEL determines MCGFLLCLK' or MCGPLLCLK/
                       2)
   98 00000000         ; 1=   16:PLLFLLSEL=PLL/FLL clock select (MCGPLLCLK/2)
  100 00000000 04000000 
                       SIM_SOPT2_UART0SRC_MCGPLLCLK
                               EQU              (1 << SIM_SOPT2_UART0SRC_SHIFT)
  102 00000000 04010000 
                       SIM_SOPT2_UART0_MCGPLLCLK_DIV2
                               EQU              (SIM_SOPT2_UART0SRC_MCGPLLCLK :
OR: SIM_SOPT2_PLLFLLSEL_MASK)
  103 00000000         ;-------------------------------------------------------
                       --------
  104 00000000         ;SIM_SOPT5
  105 00000000         ; 0->   16:UART0 open drain enable (disabled)
  106 00000000         ; 0->   02:UART0 receive data select (UART0_RX)
  107 00000000         ;00->01-00:UART0 transmit data select source (UART0_TX)
  111 00000000 00010007 
                       SIM_SOPT5_UART0_EXTERN_MASK_CLEAR
                               EQU              (SIM_SOPT5_UART0ODE_MASK :OR:  
                                SIM_SOPT5_UART0RXSRC_MASK :OR:               
                   SIM_SOPT5_UART0TXSRC_MASK)
  112 00000000         ;-------------------------------------------------------
                       --------
  113 00000000         ;UART0_BDH
  114 00000000         ;    0->  7:LIN break detect IE (disabled)
  115 00000000         ;    0->  6:RxD input active edge IE (disabled)
  116 00000000         ;    0->  5:Stop bit number select (1)
  117 00000000         ;00001->4-0:SBR[12:0] (UART0CLK / [9600 * (OSR + 1)]) 
  118 00000000         ;UART0CLK is MCGPLLCLK/2
  119 00000000         ;MCGPLLCLK is 96 MHz
  120 00000000         ;MCGPLLCLK/2 is 48 MHz
  121 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  122 00000000 00000001 
                       UART0_BDH_9600
                               EQU              0x01
  123 00000000         ;-------------------------------------------------------
                       --------
  124 00000000         ;UART0_BDL
  125 00000000         ;0x38->7-0:SBR[7:0] (UART0CLK / [9600 * (OSR + 1)])
  126 00000000         ;UART0CLK is MCGPLLCLK/2
  127 00000000         ;MCGPLLCLK is 96 MHz
  128 00000000         ;MCGPLLCLK/2 is 48 MHz
  129 00000000         ;SBR = 48 MHz / (9600 * 16) = 312.5 --> 312 = 0x138
  130 00000000 00000038 
                       UART0_BDL_9600
                               EQU              0x38
  131 00000000         ;-------------------------------------------------------
                       --------
  132 00000000         ;UART0_C1
  133 00000000         ;0-->7:LOOPS=loops select (normal)



ARM Macro Assembler    Page 5 Lab Exercise Ten: Timer Driver Input Timing


  134 00000000         ;0-->6:DOZEEN=doze enable (disabled)
  135 00000000         ;0-->5:RSRC=receiver source select (internal--no effect 
                       LOOPS=0)
  136 00000000         ;0-->4:M=9- or 8-bit mode select 
  137 00000000         ;        (1 start, 8 data [lsb first], 1 stop)
  138 00000000         ;0-->3:WAKE=receiver wakeup method select (idle)
  139 00000000         ;0-->2:IDLE=idle line type select (idle begins after sta
                       rt bit)
  140 00000000         ;0-->1:PE=parity enable (disabled)
  141 00000000         ;0-->0:PT=parity type (even parity--no effect PE=0)
  142 00000000 00000000 
                       UART0_C1_8N1
                               EQU              0x00
  143 00000000         ;-------------------------------------------------------
                       --------
  144 00000000         ;UART0_C2
  145 00000000         ;0-->7:TIE=transmit IE for TDRE (disabled)
  146 00000000         ;0-->6:TCIE=transmission complete IE for TC (disabled)
  147 00000000         ;0-->5:RIE=receiver IE for RDRF (disabled)
  148 00000000         ;0-->4:ILIE=idle line IE for IDLE (disabled)
  149 00000000         ;1-->3:TE=transmitter enable (enabled)
  150 00000000         ;1-->2:RE=receiver enable (enabled)
  151 00000000         ;0-->1:RWU=receiver wakeup control (normal)
  152 00000000         ;0-->0:SBK=send break (disabled, normal)
  153 00000000 0000000C 
                       UART0_C2_T_R
                               EQU              (UART0_C2_TE_MASK :OR: UART0_C2
_RE_MASK)
  154 00000000         ;-------------------------------------------------------
                       --------
  155 00000000         ;UART0_C3
  156 00000000         ;0-->7:R8T9=9th data bit for receiver (not used M=0)
  157 00000000         ;           10th data bit for transmitter (not used M10=
                       0)
  158 00000000         ;0-->6:R9T8=9th data bit for transmitter (not used M=0)
  159 00000000         ;           10th data bit for receiver (not used M10=0)
  160 00000000         ;0-->5:TXDIR=UART_TX pin direction in single-wire mode
  161 00000000         ;            (no effect LOOPS=0)
  162 00000000         ;0-->4:TXINV=transmit data inversion (not inverted)
  163 00000000         ;0-->3:ORIE=overrun IE for OR (disabled)
  164 00000000         ;0-->2:NEIE=noise error IE for NF (disabled)
  165 00000000         ;0-->1:FEIE=framing error IE for FE (disabled)
  166 00000000         ;0-->0:PEIE=parity error IE for PF (disabled)
  167 00000000 00000000 
                       UART0_C3_NO_TXINV
                               EQU              0x00
  168 00000000         ;-------------------------------------------------------
                       --------
  169 00000000         ;UART0_C4
  170 00000000         ;    0-->  7:MAEN1=match address mode enable 1 (disabled
                       )
  171 00000000         ;    0-->  6:MAEN2=match address mode enable 2 (disabled
                       )
  172 00000000         ;    0-->  5:M10=10-bit mode select (not selected)
  173 00000000         ;01111-->4-0:OSR=over sampling ratio (16)
  174 00000000         ;               = 1 + OSR for 3 <= OSR <= 31
  175 00000000         ;               = 16 for 0 <= OSR <= 2 (invalid values)
  176 00000000 0000000F 
                       UART0_C4_OSR_16



ARM Macro Assembler    Page 6 Lab Exercise Ten: Timer Driver Input Timing


                               EQU              0x0F
  177 00000000 0000000F 
                       UART0_C4_NO_MATCH_OSR_16
                               EQU              UART0_C4_OSR_16
  178 00000000         ;-------------------------------------------------------
                       --------
  179 00000000         ;UART0_C5
  180 00000000         ;  0-->  7:TDMAE=transmitter DMA enable (disabled)
  181 00000000         ;  0-->  6:Reserved; read-only; always 0
  182 00000000         ;  0-->  5:RDMAE=receiver full DMA enable (disabled)
  183 00000000         ;000-->4-2:Reserved; read-only; always 0
  184 00000000         ;  0-->  1:BOTHEDGE=both edge sampling (rising edge only
                       )
  185 00000000         ;  0-->  0:RESYNCDIS=resynchronization disable (enabled)
                       
  186 00000000 00000000 
                       UART0_C5_NO_DMA_SSR_SYNC
                               EQU              0x00
  187 00000000         ;-------------------------------------------------------
                       --------
  188 00000000         ;UART0_S1
  189 00000000         ;0-->7:TDRE=transmit data register empty flag; read-only
                       
  190 00000000         ;0-->6:TC=transmission complete flag; read-only
  191 00000000         ;0-->5:RDRF=receive data register full flag; read-only
  192 00000000         ;1-->4:IDLE=idle line flag; write 1 to clear (clear)
  193 00000000         ;1-->3:OR=receiver overrun flag; write 1 to clear (clear
                       )
  194 00000000         ;1-->2:NF=noise flag; write 1 to clear (clear)
  195 00000000         ;1-->1:FE=framing error flag; write 1 to clear (clear)
  196 00000000         ;1-->0:PF=parity error flag; write 1 to clear (clear)
  197 00000000 0000001F 
                       UART0_S1_CLEAR_FLAGS
                               EQU              0x1F
  198 00000000         ;-------------------------------------------------------
                       --------
  199 00000000         ;UART0_S2
  200 00000000         ;1-->7:LBKDIF=LIN break detect interrupt flag (clear)
  201 00000000         ;             write 1 to clear
  202 00000000         ;1-->6:RXEDGIF=RxD pin active edge interrupt flag (clear
                       )
  203 00000000         ;              write 1 to clear
  204 00000000         ;0-->5:(reserved); read-only; always 0
  205 00000000         ;0-->4:RXINV=receive data inversion (disabled)
  206 00000000         ;0-->3:RWUID=receive wake-up idle detect
  207 00000000         ;0-->2:BRK13=break character generation length (10)
  208 00000000         ;0-->1:LBKDE=LIN break detect enable (disabled)
  209 00000000         ;0-->0:RAF=receiver active flag; read-only
  210 00000000 000000C0 
                       UART0_S2_NO_RXINV_BRK10_NO_LBKDETECT_CLEAR_FLAGS
                               EQU              0xC0
  211 00000000         ;-------------------------------------------------------
                       --------
  212 00000000         ;*******************************************************
                       *********
  213 00000000         ;Program
  214 00000000         ;Linker requires Reset_Handler
  215 00000000                 AREA             MyCode,CODE,READONLY
  216 00000000                 ENTRY



ARM Macro Assembler    Page 7 Lab Exercise Ten: Timer Driver Input Timing


  217 00000000                 EXPORT           Reset_Handler
  218 00000000                 EXPORT           PutChar
  219 00000000                 IMPORT           Startup
  220 00000000         Reset_Handler
                               PROC             {},{}
  221 00000000         main
  222 00000000         ;-------------------------------------------------------
                       --------
  223 00000000         ;Mask interrupts
  224 00000000 B672            CPSID            I
  225 00000002         ;KL46 system startup with 48-MHz system clock
  226 00000002 F7FF FFFE       BL               Startup
  227 00000006         ;-------------------------------------------------------
                       --------
  228 00000006         ;>>>>> begin main program code <<<<<
  229 00000006         ;Initialize the UART0_IRQ
  230 00000006 B672            CPSID            I
  231 00000008 F7FF FFFE       BL               Init_UART0_IRQ
  232 0000000C F7FF FFFE       BL               Init_PIT_IRQ
  233 00000010 F7FF FFFE       BL               Init_Lights
  234 00000014 B662            CPSIE            I
  235 00000016         
  236 00000016 4842            LDR              R0,=RunStopWatch
  237 00000018 2101            MOVS             R1,#1
  238 0000001A 6001            STR              R1,[R0,#0]
  239 0000001C 4841            LDR              R0,=Count
  240 0000001E 2100            MOVS             R1,#0
  241 00000020 6001            STR              R1,[R0,#0]
  242 00000022         
  243 00000022 4841            LDR              R0,=Welcome
  244 00000024 F7FF FFFE       BL               PutStringSB
  245 00000028 4840    MainLoop
                               LDR              R0,=beginningPrompt
  246 0000002A F7FF FFFE       BL               PutStringSB
  247 0000002E         
  248 0000002E 4A40            LDR              R2,=0x1FFFFFFF
  249 00000030 F7FF FFFE       BL               GetChar
  250 00000034 220B            MOVS             R2,#0xB
  251 00000036 280D            CMP              R0,#0x0D
  252 00000038 D017            BEQ              GameLoop
  253 0000003A 2852            CMP              R0,#0x52
  254 0000003C D002            BEQ              Rules
  255 0000003E 2872            CMP              R0,#0x72
  256 00000040 D000            BEQ              Rules
  257 00000042 E7F1            B                MainLoop
  258 00000044         
  259 00000044 483B    Rules   LDR              R0,=helpCommands
  260 00000046 F7FF FFFE       BL               PutStringSB
  261 0000004A 483B            LDR              R0,=helpCommands2
  262 0000004C F7FF FFFE       BL               PutStringSB
  263 00000050 483A            LDR              R0,=helpCommands3
  264 00000052 F7FF FFFE       BL               PutStringSB
  265 00000056 483A            LDR              R0,=helpCommands4
  266 00000058 F7FF FFFE       BL               PutStringSB
  267 0000005C 4839            LDR              R0,=helpCommands5
  268 0000005E F7FF FFFE       BL               PutStringSB
  269 00000062 4839            LDR              R0,=helpCommands6
  270 00000064 F7FF FFFE       BL               PutStringSB
  271 00000068 E7DE            B                MainLoop



ARM Macro Assembler    Page 8 Lab Exercise Ten: Timer Driver Input Timing


  272 0000006A         
  273 0000006A 1E52    GameLoop
                               SUBS             R2,R2,#1
  274 0000006C 4837            LDR              R0,=roundNum
  275 0000006E F7FF FFFE       BL               PutStringSB
  276 00000072 0010            MOVS             R0,R2
  277 00000074 F7FF FFFE       BL               PutNumU
  278 00000078 F7FF FFFE       BL               GetRandomNumber
  279 0000007C F7FF FFFE       BL               Toggle_Light
  280 00000080 2400            MOVS             R4,#0
  281 00000082 203E    WrongAnswer
                               MOVS             R0,#0x3E
  282 00000084 F7FF FFFE       BL               PutChar
  283 00000088 F7FF FFFE       BL               GetChar
  284 0000008C F7FF FFFE       BL               PutChar
  285 00000090 2900            CMP              R1,#0
  286 00000092 D005            BEQ              NoneOn
  287 00000094 2901            CMP              R1,#1
  288 00000096 D00A            BEQ              RedOn
  289 00000098 2902            CMP              R1,#2
  290 0000009A D00F            BEQ              GreenOn
  291 0000009C 2903            CMP              R1,#3
  292 0000009E D014            BEQ              BothOn
  293 000000A0         
  294 000000A0 4E2B    NoneOn  LDR              R6,=neither
  295 000000A2 284E            CMP              R0,#0x4E
  296 000000A4 D018            BEQ              Right
  297 000000A6 286E            CMP              R0,#0x6E
  298 000000A8 D016            BEQ              Right
  299 000000AA 1C64            ADDS             R4,R4,#1
  300 000000AC E7E9            B                WrongAnswer
  301 000000AE         
  302 000000AE 4E29    RedOn   LDR              R6,=red
  303 000000B0 2852            CMP              R0,#0x52
  304 000000B2 D011            BEQ              Right
  305 000000B4 2872            CMP              R0,#0x72
  306 000000B6 D00F            BEQ              Right
  307 000000B8 1C64            ADDS             R4,R4,#1
  308 000000BA E7E2            B                WrongAnswer
  309 000000BC         
  310 000000BC 4E26    GreenOn LDR              R6,=green
  311 000000BE 2847            CMP              R0,#0x47
  312 000000C0 D00A            BEQ              Right
  313 000000C2 2867            CMP              R0,#0x67
  314 000000C4 D008            BEQ              Right
  315 000000C6 1C64            ADDS             R4,R4,#1
  316 000000C8 E7DB            B                WrongAnswer
  317 000000CA         
  318 000000CA 4E24    BothOn  LDR              R6,=both
  319 000000CC 2842            CMP              R0,#0x42
  320 000000CE D003            BEQ              Right
  321 000000D0 2862            CMP              R0,#0x62
  322 000000D2 D001            BEQ              Right
  323 000000D4 1C64            ADDS             R4,R4,#1
  324 000000D6 E7D4            B                WrongAnswer
  325 000000D8         
  326 000000D8 4B12    Right   LDR              R3,=Count
  327 000000DA 681B            LDR              R3,[R3,#0]
  328 000000DC 4820            LDR              R0,=correct



ARM Macro Assembler    Page 9 Lab Exercise Ten: Timer Driver Input Timing


  329 000000DE F7FF FFFE       BL               PutStringSB
  330 000000E2 0030            MOVS             R0,R6
  331 000000E4 F7FF FFFE       BL               PutStringSB
  332 000000E8 F7FF FFFE       BL               NewLine
  333 000000EC 481D            LDR              R0,=Score
  334 000000EE 0021            MOVS             R1,R4
  335 000000F0 F000 F800       BL               Scoring
  336 000000F4 2A01            CMP              R2,#1
  337 000000F6 D009            BEQ              EndOfGame
  338 000000F8 481B            LDR              R0,=currentScore
  339 000000FA F7FF FFFE       BL               PutStringSB
  340 000000FE 4819            LDR              R0,=Score
  341 00000100 6800            LDR              R0,[R0,#0]
  342 00000102 F7FF FFFE       BL               PutNumHex
  343 00000106 F7FF FFFE       BL               NewLine
  344 0000010A E7AE            B                GameLoop
  345 0000010C         
  346 0000010C 4817    EndOfGame
                               LDR              R0,=finalScore
  347 0000010E F7FF FFFE       BL               PutStringSB
  348 00000112 4814            LDR              R0,=Score
  349 00000114 6800            LDR              R0,[R0,#0]
  350 00000116 F7FF FFFE       BL               PutNumU
  351 0000011A E785            B                MainLoop
  352 0000011C         
  353 0000011C         
  354 0000011C         
  355 0000011C         
  356 0000011C         
  357 0000011C         
  358 0000011C         
  359 0000011C         ;>>>>>   end main program code <<<<<
  360 0000011C         ;Stay here
  361 0000011C E7FE            B                .
  362 0000011E                 ENDP
  363 0000011E 00 00 00000000 
              00000000 
              00000000 
              00000000 
              1FFFFFFF 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000         LTORG
  364 0000017C         ;>>>>> begin subroutine code <<<<<



ARM Macro Assembler    Page 10 Lab Exercise Ten: Timer Driver Input Timing


  365 0000017C         
  366 0000017C         
  367 0000017C         Init_Lights
                               PROC             {R0-R14}
  368 0000017C B407            PUSH             {R0-R2}
  369 0000017E         
  370 0000017E         ;Enable Port D and Port E
  371 0000017E 48F6            LDR              R0,=SIM_SCGC5
  372 00000180 49F6            LDR              R1,=(SIM_SCGC5_PORTD_MASK :OR: 
SIM_SCGC5_PORTE_MASK)
  373 00000182 6802            LDR              R2,[R0,#0]
  374 00000184 430A            ORRS             R2,R2,R1
  375 00000186 6002            STR              R2,[R0,#0]
  376 00000188         
  377 00000188         ;Select PORT E Pin 29 for GPIO to red LED
  378 00000188 48F5            LDR              R0,=PORTE_BASE
  379 0000018A 49F6            LDR              R1,=SET_PTE29_GPIO
  380 0000018C 6741            STR              R1,[R0,#PORTE_PCR29_OFFSET]
  381 0000018E         
  382 0000018E         ;Select PORT D Pin 5 for GPIO to green LED
  383 0000018E 48F6            LDR              R0,=PORTD_BASE
  384 00000190 49F4            LDR              R1,=SET_PTD5_GPIO
  385 00000192 6141            STR              R1,[R0,#PORTD_PCR5_OFFSET]
  386 00000194         
  387 00000194 48F5            LDR              R0,=FGPIOD_BASE
  388 00000196 49F6            LDR              R1,=LED_PORTD_MASK
  389 00000198 6141            STR              R1,[R0,#GPIO_PDDR_OFFSET]
  390 0000019A 48F6            LDR              R0,=FGPIOE_BASE
  391 0000019C 49F6            LDR              R1,=LED_PORTE_MASK
  392 0000019E 6141            STR              R1,[R0,#GPIO_PDDR_OFFSET]
  393 000001A0         
  394 000001A0         ;Turn off red LED
  395 000001A0 48F4            LDR              R0,=FGPIOE_BASE
  396 000001A2 49F5            LDR              R1,=LED_RED_MASK
  397 000001A4 6041            STR              R1,[R0,#GPIO_PSOR_OFFSET]
  398 000001A6         
  399 000001A6         ;Turn off green LED
  400 000001A6 48F1            LDR              R0,=FGPIOD_BASE
  401 000001A8 49F1            LDR              R1,=LED_GREEN_MASK
  402 000001AA 6041            STR              R1,[R0,#GPIO_PSOR_OFFSET]
  403 000001AC         
  404 000001AC BC07            POP              {R0-R2}
  405 000001AE 4770            BX               LR
  406 000001B0                 ENDP
  407 000001B0         
  408 000001B0         
  409 000001B0         ;Subroutine: Toggle Light
  410 000001B0         ;Input: R1: 0 for Red, anything else for Green
  411 000001B0         
  412 000001B0         Toggle_Light
                               PROC             {R0-R14}
  413 000001B0 B40F            PUSH             {R0-R3}
  414 000001B2         
  415 000001B2 2900            CMP              R1,#0
  416 000001B4 D005            BEQ              None
  417 000001B6 2901            CMP              R1,#1
  418 000001B8 D00A            BEQ              Red
  419 000001BA 2902            CMP              R1,#2
  420 000001BC D00F            BEQ              Green



ARM Macro Assembler    Page 11 Lab Exercise Ten: Timer Driver Input Timing


  421 000001BE 2903            CMP              R1,#3
  422 000001C0 D014            BEQ              BothLights
  423 000001C2         
  424 000001C2         
  425 000001C2         None                                 ;Turn off red LED
  426 000001C2 48EC            LDR              R0,=FGPIOE_BASE
  427 000001C4 49EC            LDR              R1,=LED_RED_MASK
  428 000001C6 6041            STR              R1,[R0,#GPIO_PSOR_OFFSET]
  429 000001C8         
  430 000001C8         ;Turn off green LED
  431 000001C8 48E8            LDR              R0,=FGPIOD_BASE
  432 000001CA 49E9            LDR              R1,=LED_GREEN_MASK
  433 000001CC 6041            STR              R1,[R0,#GPIO_PSOR_OFFSET]
  434 000001CE E013            B                EndLight
  435 000001D0         
  436 000001D0         
  437 000001D0         ;Turn on red LED
  438 000001D0 48E8    Red     LDR              R0,=FGPIOE_BASE
  439 000001D2 49E9            LDR              R1,=LED_RED_MASK
  440 000001D4 6081            STR              R1,[R0,#GPIO_PCOR_OFFSET]
  441 000001D6         
  442 000001D6         ;Turn off green LED
  443 000001D6 48E5            LDR              R0,=FGPIOD_BASE
  444 000001D8 49E5            LDR              R1,=LED_GREEN_MASK
  445 000001DA 6041            STR              R1,[R0,#GPIO_PSOR_OFFSET]
  446 000001DC E00C            B                EndLight
  447 000001DE         
  448 000001DE         
  449 000001DE         Green                                ;Turn on green LED
  450 000001DE 48E3            LDR              R0,=FGPIOD_BASE
  451 000001E0 49E3            LDR              R1,=LED_GREEN_MASK
  452 000001E2 6081            STR              R1,[R0,#GPIO_PCOR_OFFSET]
  453 000001E4         
  454 000001E4         ;Turn off red LED
  455 000001E4 48E3            LDR              R0,=FGPIOE_BASE
  456 000001E6 49E4            LDR              R1,=LED_RED_MASK
  457 000001E8 6041            STR              R1,[R0,#GPIO_PSOR_OFFSET]
  458 000001EA E005            B                EndLight
  459 000001EC         
  460 000001EC         BothLights                           ;Turn on red LED
  461 000001EC 48E1            LDR              R0,=FGPIOE_BASE
  462 000001EE 49E2            LDR              R1,=LED_RED_MASK
  463 000001F0 6081            STR              R1,[R0,#GPIO_PCOR_OFFSET]
  464 000001F2         
  465 000001F2         ;Turn on green LED
  466 000001F2 48DE            LDR              R0,=FGPIOD_BASE
  467 000001F4 49DE            LDR              R1,=LED_GREEN_MASK
  468 000001F6 6081            STR              R1,[R0,#GPIO_PCOR_OFFSET]
  469 000001F8         
  470 000001F8 BC0F    EndLight
                               POP              {R0-R3}
  471 000001FA 4770            BX               LR
  472 000001FC                 ENDP
  473 000001FC         
  474 000001FC         
  475 000001FC         ;This subroutine prints out a given string to the screen
                       . 
  476 000001FC         ;Input parameters:
  477 000001FC         ;R0 : Address of the string to be printed



ARM Macro Assembler    Page 12 Lab Exercise Ten: Timer Driver Input Timing


  478 000001FC         ;There are no output parameters, other than the printed 
                       result to the screen. 
  479 000001FC         PutStringSB
                               PROC             {R0-R14}, {}
  480 000001FC         
  481 000001FC B50F            PUSH             {R0-R3,LR}  ;Store current valu
                                                            es of R2, R3
  482 000001FE 0002            MOVS             R2,R0       ;R2 has address
  483 00000200         
  484 00000200 7810    ThisWhile
                               LDRB             R0,[R2,#0]  ;Otherwise, load th
                                                            e character
  485 00000202 2800            CMP              R0,#0       ;If the next char i
                                                            s null...
  486 00000204 D003            BEQ              EndThisLoop ;Go the EndThisLoop
                                                            
  487 00000206 F7FF FFFE       BL               PutChar     ;Put the next char 
                                                            in the string
  488 0000020A 1C52            ADDS             R2,R2,#1    ;Increment the addr
                                                            ess by 1 byte
  489 0000020C E7F8            B                ThisWhile   ;Go to ThisWhile
  490 0000020E         EndThisLoop
  491 0000020E BD0F            POP              {R0-R3,PC}  ;Restore original v
                                                            alues of R3 and R2
  492 00000210                 ENDP
  493 00000210         
  494 00000210         
  495 00000210         
  496 00000210         ;This subroutine prints out a given unsigned word number
                        value to the screen in hexidecimal.
  497 00000210         ;Input Parameters:
  498 00000210         ;R0 : Unsigned word value 
  499 00000210         ;There is no output, only a printed value to the screen.
                        
  500 00000210         PutNumHex
                               PROC             {R0-R14},{}
  501 00000210         ;Keep
  502 00000210 B57F            PUSH             {R0-R6, LR} ;Saves the values i
                                                            n registers R0-R3
  503 00000212 2100            MOVS             R1,#0       ;R1 gets the counte
                                                            r
  504 00000214 221C            MOVS             R2,#28      ;R2 gets the shift 
                                                            amount for number o
                                                            f bits to shift
  505 00000216 0004            MOVS             R4,R0       ;Move the value of 
                                                            R4 into R0
  506 00000218         
  507 00000218         Loop
  508 00000218 2909            CMP              R1,#9       ;Comparing the valu
                                                            e in R1 to 9
  509 0000021A D014            BEQ              EndLoopHere ;If the values are 
                                                            equal, go to EndLoo
                                                            p
  510 0000021C 41D4            RORS             R4,R4,R2    ;Otherwise, do a ro
                                                            tating shift
  511 0000021E 250F            MOVS             R5,#0x0000000F
  512 00000220 0026            MOVS             R6,R4
  513 00000222 402C            ANDS             R4,R4,R5    ;Gets the last hex 
                                                            value in the rotate



ARM Macro Assembler    Page 13 Lab Exercise Ten: Timer Driver Input Timing


                                                            d R4 and puts it in
                                                            to R0
  514 00000224 0020            MOVS             R0,R4
  515 00000226 2809            CMP              R0,#9       ;Compare the value 
                                                            of R0 to 9
  516 00000228 D806            BHI              HigherThanNine ;If the value in
                                                             R0 > 9, go to High
                                                            erThanNine
  517 0000022A 3030            ADDS             R0,#0x30    ;Add the hex value 
                                                            of 0x30 into R0
  518 0000022C 1C49            ADDS             R1,R1,#1    ;Increment R1, the 
                                                            counter
  519 0000022E F7FF FFFE       BL               PutChar     ;Print the characte
                                                            r with the ascii va
                                                            lue in R0 to the sc
                                                            reen 
  520 00000232 0034            MOVS             R4,R6
  521 00000234 F7FF FFF0       BL               Loop        ;Go to Loop
  522 00000238         
  523 00000238         HigherThanNine
  524 00000238 3037            ADDS             R0,#0x37    ;Add the hex value 
                                                            of 0x37 into R0 
  525 0000023A 1C49            ADDS             R1,R1,#1    ;Increment R1, the 
                                                            counter
  526 0000023C F7FF FFFE       BL               PutChar     ;Print the characte
                                                            r with the ascii va
                                                            lue in R0 to the sc
                                                            reen 
  527 00000240 0034            MOVS             R4,R6
  528 00000242 F7FF FFE9       BL               Loop        ;Go to Loop
  529 00000246         
  530 00000246         EndLoopHere
  531 00000246 BD7F            POP              {R0-R6, PC} ;Restore the value 
                                                            of registers R0-R3
  532 00000248                 ENDP
  533 00000248         
  534 00000248         ;This subroutine prints out a given word value in decima
                       l to the screen. 
  535 00000248         ;Input Parameters:
  536 00000248         ;R0 : Unsigned word value 
  537 00000248         ;There is no output, only a printed value to the screen.
                        
  538 00000248         PutNumUB
                               PROC             {R0-R14}, {}
  539 00000248         ;Keep
  540 00000248 B503            PUSH             {R0-R1, LR} ;Saves the value in
                                                             R0
  541 0000024A 21FF            MOVS             R1,#0x000000FF ;R1 gets the mas
                                                            k for the first byt
                                                            e in the unsigned w
                                                            ord value in R0
  542 0000024C 4008            ANDS             R0,R0,R1    ;R0 gets the value 
                                                            of it's 2 least sig
                                                            nificant hex digits
                                                             
  543 0000024E F7FF FFFE       BL               PutNumU     ;Go to the subrouti
                                                            ne PutNumU
  544 00000252 BD03            POP              {R0-R1, PC} ;Stores the value o
                                                            f R0



ARM Macro Assembler    Page 14 Lab Exercise Ten: Timer Driver Input Timing


  545 00000254                 ENDP
  546 00000254         
  547 00000254         
  548 00000254         
  549 00000254         ;This subroutine prints out the given value to the scree
                       n. 
  550 00000254         ;Input parameters:
  551 00000254         ;R0 : Length of the value
  552 00000254         PutNumU PROC             {R0-R14}, {}
  553 00000254         
  554 00000254 B507            PUSH             {R0-R2, LR} ;Store the values o
                                                            f R0-R2 and LR
  555 00000256 2200            MOVS             R2,#0       ;Set R2 equal to 0
  556 00000258 2800            CMP              R0,#0       ;Comparing the numb
                                                            er size to 0
  557 0000025A D007            BEQ              WhileR2Not0 ;If the size is 0, 
                                                            go to WhileR2Not0
  558 0000025C 0001    PutNumULoop
                               MOVS             R1,R0       ;R1 has the length 
                                                            of the string
  559 0000025E 200A            MOVS             R0,#10      ;R0 gets 10
  560 00000260 F7FF FFFE       BL               DIVU        ;Divide R1 (the len
                                                            gth) by R0 (10) to 
                                                            get a quotient and 
                                                            denominator, 
  561 00000264         ;which will be the tens and ones place of the length. R0
                        get the quotient
  562 00000264         ;and R1 gets the remainder.
  563 00000264 B402            PUSH             {R1}        ;Save the value of 
                                                            the remainder
  564 00000266 1C52            ADDS             R2,R2,#1    ;Increment R2, the 
                                                            number of things th
                                                            at have been added 
                                                            to the stack 
  565 00000268 2800            CMP              R0,#0       ;Compare the rest o
                                                            f the size of the i
                                                            nput to 0
  566 0000026A D1F7            BNE              PutNumULoop ;If they are not eq
                                                            ual, go to PutNumUL
                                                            oop
  567 0000026C         
  568 0000026C 2A00    WhileR2Not0
                               CMP              R2,#0       ;Comparing the numb
                                                            er of things added 
                                                            to the stack to 0
  569 0000026E D005            BEQ              Ending      ;If they are equal,
                                                             go to Ending
  570 00000270 BC01            POP              {R0}        ;Otherwise, put the
                                                             next item on the s
                                                            tack into R0
  571 00000272 3030            ADDS             R0,#0x30    ;Convert the number
                                                             in R0 into the asc
                                                            ii decimal value
  572 00000274 F7FF FFFE       BL               PutChar     ;Print that value t
                                                            o the screen
  573 00000278 1E52            SUBS             R2,R2,#1    ;Decrement the numb
                                                            er of items that ar
                                                            e left to take from
                                                             the stack 



ARM Macro Assembler    Page 15 Lab Exercise Ten: Timer Driver Input Timing


  574 0000027A E7F7            B                WhileR2Not0 ;Go to WhileR2Not0
  575 0000027C         
  576 0000027C         Ending
  577 0000027C BD07            POP              {R0-R2, PC} ;Restore the values
                                                             of R0-R2 and PC
  578 0000027E                 ENDP
  579 0000027E         
  580 0000027E         
  581 0000027E         
  582 0000027E         
  583 0000027E         GetStringSB
                               PROC             {R0-R14}, {}
  584 0000027E         
  585 0000027E B50F            PUSH             {R0-R3,LR}  ;Store current valu
                                                            es of R2 and R3
  586 00000280 0002            MOVS             R2,R0       ;R2 has address
  587 00000282 2300            MOVS             R3,#0       ;R3 is counter
  588 00000284 1E89            SUBS             R1,R1,#2    ;Leaving space for 
                                                            the null character
  589 00000286         
  590 00000286 F7FF FFFE 
                       While   BL               GetChar     ;Get next Char
  591 0000028A 280D            CMP              R0,#0x0D    ;If R0 is the enter
                                                             key...
  592 0000028C D010            BEQ              EndLoop     ;Go to EndLoop
  593 0000028E 281F            CMP              R0,#0x1F    ;Comparing R0 to an
                                                            y of the control ch
                                                            aracters
  594 00000290 DDF9            BLE              While       ;If R0 is any contr
                                                            ol character other 
                                                            than backspace and 
                                                            enter, got to While
                                                            
  595 00000292 287F            CMP              R0,#0x7F    ;Otherwise, if R0 i
                                                            s the backspace key
                                                            ...
  596 00000294 D006            BEQ              BackS       ;Go to BackS
  597 00000296 4299            CMP              R1,R3       ;Otherwise, if R3 i
                                                            s the same as the l
                                                            ength of the buffer
                                                            ...
  598 00000298 DBF5            BLT              While       ;Go to while
  599 0000029A F7FF FFFE       BL               PutChar     ;Prints the charact
                                                            er 
  600 0000029E 54D0            STRB             R0,[R2,R3]  ;Store the value in
                                                             R0 into memory loc
                                                            ation R2 with offse
                                                            t R3
  601 000002A0 1C5B            ADDS             R3,R3,#1    ;Otherwise, counter
                                                             increments
  602 000002A2 E7F0            B                While       ;Go to while
  603 000002A4         
  604 000002A4 2B00    BackS   CMP              R3,#0       ;If the length of t
                                                            he string is 0...
  605 000002A6 D0EE            BEQ              While       ;Go to while
  606 000002A8 1E5B            SUBS             R3,R3,#1    ;Otherwise, counter
                                                             is decremented
  607 000002AA F7FF FFFE       BL               PutChar     ;Shows the backspac
                                                            e on the screen



ARM Macro Assembler    Page 16 Lab Exercise Ten: Timer Driver Input Timing


  608 000002AE E7EA            B                While       ;Go to while
  609 000002B0         
  610 000002B0         EndLoop
  611 000002B0         
  612 000002B0 2000            MOVS             R0,#0       ;R0 gets 0
  613 000002B2 54D0            STRB             R0,[R2,R3]  ;Stores the last me
                                                            mory location of th
                                                            e string with a nul
                                                            l value. 
  614 000002B4 BD0F            POP              {R0-R3,PC}
  615 000002B6                 ENDP
  616 000002B6         
  617 000002B6         
  618 000002B6         
  619 000002B6         ;This subroutine divides two numbers and returns the res
                       ult of the division, as
  620 000002B6         ;well as the remainder of the division. 
  621 000002B6         ;Input parameters:
  622 000002B6         ;R0 : Denominator of division
  623 000002B6         ;R1 : numerator of division
  624 000002B6         ;Output:
  625 000002B6         ;R1 : gets the remainder
  626 000002B6         ;R0 : gets the divided amount
  627 000002B6         ;APSR C Flag : set if failed division (divide by 0) or c
                       leared if success
  628 000002B6         DIVU    PROC             {R2-R14},{}
  629 000002B6         
  630 000002B6 2800            CMP              R0,#0       ;Checks if the deno
                                                            minator is 0
  631 000002B8 D014            BEQ              SetCFlag    ;If denominator is 
                                                            0, go to SetCFlag
  632 000002BA         
  633 000002BA B43C            PUSH             {R2-R5}     ;Saves the value in
                                                             registers R2-R5
  634 000002BC 2200            MOVS             R2,#0       ;Sets (counter) R2 
                                                            = 0
  635 000002BE 2900            CMP              R1,#0       ;Checks if the nume
                                                            rator is 0
  636 000002C0 D004            BEQ              ClearCFlag
  637 000002C2         
  638 000002C2 4281    DIVULoop
                               CMP              R1,R0       ;Compares R1 to R0
  639 000002C4 D302            BLO              ClearCFlag  ;If R1 < R0, go to 
                                                            END
  640 000002C6 1A09            SUBS             R1,R1,R0    ;Otherwise, R1 gets
                                                             R1-R0
  641 000002C8 1C52            ADDS             R2,R2,#1    ;R2 gets R2 + 1
  642 000002CA E7FA            B                DIVULoop    ;Loop back to DIVUL
                                                            oop
  643 000002CC         
  644 000002CC         ClearCFlag
  645 000002CC 0014            MOVS             R4,R2       ;Places the value i
                                                            n the division resu
                                                            lt into R4
  646 000002CE 000D            MOVS             R5,R1       ;Places the value o
                                                            f the remainder int
                                                            o R5
  647 000002D0         
  648 000002D0 F3EF 8000       MRS              R0,APSR     ;The following line



ARM Macro Assembler    Page 17 Lab Exercise Ten: Timer Driver Input Timing


                                                            s clear the C flag 
                                                            without changing ot
                                                            her values
  649 000002D4 2120            MOVS             R1,#0x20
  650 000002D6 0609            LSLS             R1,R1,#24
  651 000002D8 4388            BICS             R0,R0,R1
  652 000002DA F380 8800       MSR              APSR,R0
  653 000002DE         
  654 000002DE 0020            MOVS             R0,R4       ;R0 gets the divide
                                                            d amount
  655 000002E0         
  656 000002E0 0029            MOVS             R1,R5       ;R1 get the remaind
                                                            er
  657 000002E2 E007            B                EndDIVU2    ;Go to EndDIVU2
  658 000002E4         
  659 000002E4         
  660 000002E4         SetCFlag
  661 000002E4 F3EF 8000       MRS              R0,APSR     ;The following line
                                                            s set the C flag wi
                                                            thout changing any 
                                                            other values
  662 000002E8 2120            MOVS             R1,#0x20
  663 000002EA 0609            LSLS             R1,R1,#24
  664 000002EC 4308            ORRS             R0,R0,R1
  665 000002EE F380 8800       MSR              APSR,R0
  666 000002F2 E000            B                EndDIVU     ;Go to EndDIVU
  667 000002F4         
  668 000002F4         EndDIVU2
  669 000002F4 BC3C            POP              {R2-R5}     ;Re-enters the valu
                                                            e for registers R2-
                                                            R5 from before
  670 000002F6         EndDIVU
  671 000002F6 4770            BX               LR          ;Return to main pro
                                                            gram 
  672 000002F8                 ENDP
  673 000002F8         
  674 000002F8         
  675 000002F8         ;Matthew Rigby
  676 000002F8         ;Assembly Language Lab 9 Prelab
  677 000002F8         ;Lab Section 1, Wednesdays from 5:30PM - 7:30PM
  678 000002F8         
  679 000002F8         ;This subroutine dequeues a character from the ReceiveQu
                       eue and returns it into register R0.
  680 000002F8         ;Input Parameters:
  681 000002F8         ;R2 gets the time it should take for the round to run. 
  682 000002F8         ;Output:
  683 000002F8         ;R0 : Dequeued character into R0
  684 000002F8         GetChar PROC             {R0,R2-R14}, {}
  685 000002F8         
  686 000002F8 B502            PUSH             {R1, LR}    ;Save LR value
  687 000002FA         
  688 000002FA F3EF 8000       MRS              R0,APSR     ;The following line
                                                            s clear the C flag 
                                                            without changing ot
                                                            her values
  689 000002FE 2120            MOVS             R1,#0x20
  690 00000300 0609            LSLS             R1,R1,#24
  691 00000302 4388            BICS             R0,R0,R1
  692 00000304 F380 8800       MSR              APSR,R0



ARM Macro Assembler    Page 18 Lab Exercise Ten: Timer Driver Input Timing


  693 00000308         
  694 00000308         
  695 00000308 4B9C    keepGoing
                               LDR              R3,=Count
  696 0000030A 681B            LDR              R3,[R3,#0]
  697 0000030C 429A            CMP              R2,R3
  698 0000030E DD05            BLE              EndWhile
  699 00000310         
  700 00000310 B672            CPSID            I           ;Mask other interru
                                                            pts
  701 00000312 499B            LDR              R1,=ReceiveQueue ;R0 gets the a
                                                            ddress of the queue
                                                             ReceiveQueue
  702 00000314 F7FF FFFE       BL               DeQueue     ;Dequeue from Recei
                                                            veQueue
  703 00000318 B662            CPSIE            I           ;Unmask other inter
                                                            rupts
  704 0000031A D2F5            BCS              keepGoing   ;If the carry flag 
                                                            was set, go to keep
                                                            Going
  705 0000031C         EndWhile
  706 0000031C BD02            POP              {R1, PC}    ;Restore PC value
  707 0000031E                 ENDP
  708 0000031E         
  709 0000031E         
  710 0000031E         ;This subroutine dequeues a character from the TransmitQ
                       ueue and returns it into register R0.
  711 0000031E         ;No input parameters
  712 0000031E         ;Output:
  713 0000031E         ;R0 : Dequeued character into R0
  714 0000031E         PutChar PROC             {R1-R14},{}
  715 0000031E B507            PUSH             {R0-R2, LR} ;Save R0-R2 and LR 
                                                            values
  716 00000320         keepGoing2
  717 00000320 B672            CPSID            I           ;Mask other interru
                                                            pts
  718 00000322 4998            LDR              R1,=TransmitQueue ;R0 gets the 
                                                            address of the queu
                                                            e TransmitQueue
  719 00000324 F7FF FFFE       BL               EnQueue
  720 00000328 B662            CPSIE            I           ;Unmask other inter
                                                            rupts
  721 0000032A D2F9            BCS              keepGoing2  ;If the carry flag 
                                                            was set, go to keep
                                                            Going2
  722 0000032C         EndingWhile
  723 0000032C 21AC            MOVS             R1,#UART0_C2_TI_RI ;R1 gets the
                                                             value of the EQUat
                                                            es UART0_C2_TI_RI
  724 0000032E 4A96            LDR              R2,=UART0_BASE
  725 00000330 70D1            STRB             R1,[R2,#UART0_C2_OFFSET] ;Store
                                                             the value of UART0
                                                            _C2_TI_RI into Tran
                                                            smitQueue with offs
                                                            et UART_C2_OFFSET
  726 00000332 BD07            POP              {R0-R2, PC} ;Restore R0-R2 and 
                                                            PC values
  727 00000334                 ENDP
  728 00000334         



ARM Macro Assembler    Page 19 Lab Exercise Ten: Timer Driver Input Timing


  729 00000334         
  730 00000334         ;This is for the ISR that will handle UART0 transmit and
                        receive interrupts: UART0_ISR
  731 00000334         ;No input parameters
  732 00000334         ;The output is in the TxQ and RxQ, depending on why the 
                       interrupt was called. Characters may be 
  733 00000334         ;added to the TxQ or RxQ, dequeued from the TxQ, or prin
                       ted to the screen, depending. 
  734 00000334         UART0_ISR
                               PROC             {R0-R14},{}
  735 00000334 B672            CPSID            I           ;Mask other interru
                                                            pts  
  736 00000336 B500            PUSH             {LR}        ;Push any registers
                                                             used, except {R0-R
                                                            3,R12}
  737 00000338         
  738 00000338 4994            LDR              R1,=UART0_C2 ;R1 gets the addre
                                                            ss of the UART0_C2 
                                                            (Control register 2
                                                             of the UART0)
  739 0000033A 7809            LDRB             R1,[R1,#0]  ;R1 gets the byte v
                                                            alue of UART0_C2
  740 0000033C 2280            MOVS             R2,#UART0_C2_TIE_MASK ;R2 gets 
                                                            the mask for the TI
                                                            E (Transmit Interru
                                                            pt Enabled) in C2
  741 0000033E 400A            ANDS             R2,R2,R1    ;This ANDS will che
                                                            ck if the TIE is a 
                                                            1 ( there was an in
                                                            terrupt )
  742 00000340 D010            BEQ              CheckRDRF   ;If the TIE is a 0,
                                                             go to CheckRDRF
  743 00000342         
  744 00000342 4993            LDR              R1,=UART0_S1 ;Otherwise, R1 get
                                                            s the address of th
                                                            e UART0_S1 (Status 
                                                            register 1 of the U
                                                            ART0)
  745 00000344 7809            LDRB             R1,[R1,#0]  ;R1 gets the byte v
                                                            alue of UART0_S1
  746 00000346 2280            MOVS             R2,#UART0_S1_TDRE_MASK ;R2 gets
                                                             the mask for the T
                                                            DRE (Transmit Data 
                                                            Register Empty) in 
                                                            S1
  747 00000348 400A            ANDS             R2,R2,R1    ;This ANDS will che
                                                            ck if the TRDE is a
                                                             1 (the transmit da
                                                            ta buffer is empty)
                                                            
  748 0000034A D00B            BEQ              CheckRDRF   ;If the ANDS produc
                                                            ed a 0, meaning the
                                                             transmit data buff
                                                            er is full, go to C
                                                            heckRDRF
  749 0000034C         
  750 0000034C         ;Dequeue charcter from TransmitQueue
  751 0000034C 498D            LDR              R1,=TransmitQueue ;Otherwise, R
                                                            1 gets the address 



ARM Macro Assembler    Page 20 Lab Exercise Ten: Timer Driver Input Timing


                                                            of the variable Tra
                                                            nsmitQueue (TxQ)
  752 0000034E F7FF FFFE       BL               DeQueue     ;DeQueue from the T
                                                            ransmitQueue
  753 00000352 D202            BCS              onlyElse    ;If the carry flag 
                                                            was set from the De
                                                            Queue, meaning it f
                                                            ailed, go to onlyEl
                                                            se
  754 00000354 498C            LDR              R1,=UART0_BASE ;Otherwise, R1 g
                                                            ets the address of 
                                                            UART0_BASE
  755 00000356 71C8            STRB             R0,[R1,#UART0_D_OFFSET] ;Store 
                                                            the value of the De
                                                            Queued item from Tx
                                                            Q and put it into t
                                                            he Data Register
  756 00000358 E004            B                CheckRDRF   ;Go to CheckRDRF
  757 0000035A         
  758 0000035A         onlyElse
  759 0000035A 4A8B            LDR              R2,=UART0_BASE ;R2 gets the add
                                                            ress of UART0_BASE
  760 0000035C 78D3            LDRB             R3,[R2,#UART0_C2_OFFSET] ;R3 ge
                                                            ts the byte value o
                                                            f Control Register 
                                                            2 in UART0 (C2)
  761 0000035E 2480            MOVS             R4,#UART0_C2_TIE_MASK ;R4 gets 
                                                            the mask of the TIE
                                                             in C2
  762 00000360 43A3            BICS             R3,R3,R4    ;Clear the TIE in C
                                                            2
  763 00000362 70D3            STRB             R3,[R2,#UART0_C2_OFFSET] ;Store
                                                             the byte value of 
                                                            C2 with the cleared
                                                             TIE bit back into 
                                                            C2
  764 00000364         
  765 00000364         CheckRDRF
  766 00000364 498A            LDR              R1,=UART0_S1 ;R1 gets the addre
                                                            ss of the UART0_S1 
                                                            (Status Register 1 
                                                            of UART0)
  767 00000366 7809            LDRB             R1,[R1,#0]  ;Load the byte valu
                                                            e of S1 into R1
  768 00000368 2220            MOVS             R2,#UART0_S1_RDRF_MASK ;R2 gets
                                                             the mask of the RD
                                                            RF (Receive Data Re
                                                            gister Full) in S1
  769 0000036A 400A            ANDS             R2,R2,R1    ;This ANDS checks i
                                                            f the RDRF is full 
                                                            (the RDRF bit is a 
                                                            1)
  770 0000036C D005            BEQ              EndIfs      ;If the RDRF bit is
                                                             a 0, go to EndIfs
  771 0000036E         
  772 0000036E 4986            LDR              R1,=UART0_BASE ;Otherwise, the 
                                                            RDRF bit is a 1, so
                                                             R1 gets the addres
                                                            s of the UART0_BASE



ARM Macro Assembler    Page 21 Lab Exercise Ten: Timer Driver Input Timing


                                                            
  773 00000370 2207            MOVS             R2,#UART0_D_OFFSET ;R2 gets the
                                                             value of the offse
                                                            t for the address o
                                                            f the data register
                                                            
  774 00000372 5C88            LDRB             R0,[R1,R2]  ;Load the value fro
                                                            m the data register
                                                             into R0
  775 00000374 4982            LDR              R1,=ReceiveQueue ;R1 gets the a
                                                            ddress of the Recei
                                                            veQueue (RxQ)
  776 00000376 F7FF FFFE       BL               EnQueue     ;Enqueue character 
                                                            into ReceiveQueue
  777 0000037A         
  778 0000037A         EndIfs
  779 0000037A B662            CPSIE            I           ;Unmask other inter
                                                            rupts
  780 0000037C BD00            POP              {PC}        ;POP PC
  781 0000037E                 ENDP
  782 0000037E         
  783 0000037E         
  784 0000037E         
  785 0000037E         ;This subroutine initializes the IRQ so that the Transmi
                       tQueue and ReceiveQueue.
  786 0000037E         ;There are no input parameters.
  787 0000037E         ;There are no output parameters, just the initialization
                        of the UART0_IRQ and the TxQ, RxQ, and queue
  788 0000037E         ;that holds the characters for this program.
  789 0000037E         Init_UART0_IRQ
                               PROC             {R0-R14},{}
  790 0000037E         
  791 0000037E B50F            PUSH             {R0-R3, LR}
  792 00000380         ;Set UART0 IRQ priority
  793 00000380 4884            LDR              R0,=QBufferTransmit ;R0 gets th
                                                            e address of the QB
                                                            ufferTransmit varia
                                                            ble (Buffer for the
                                                             TxQ)
  794 00000382 4980            LDR              R1,=TransmitQueue ;R1 gets the 
                                                            address of the Tran
                                                            smitQueue variable 
                                                            (TxQ Record)
  795 00000384 2250            MOVS             R2,#TR_BUF_SZ ;R2 gets the size
                                                             of the TxQ
  796 00000386 F7FF FFFE       BL               InitQueue   ;Initialize the TxQ
                                                            
  797 0000038A         
  798 0000038A 4883            LDR              R0,=QBufferReceive ;R0 gets the
                                                             address of the QBu
                                                            fferReceive variabl
                                                            e (Buffer for the R
                                                            xQ)
  799 0000038C 497C            LDR              R1,=ReceiveQueue ;R1 gets the a
                                                            ddress of the Recei
                                                            veQueue variable (R
                                                            xQ Record)
  800 0000038E 2250            MOVS             R2,#TR_BUF_SZ ;R2 gets the size
                                                             of the RxQ



ARM Macro Assembler    Page 22 Lab Exercise Ten: Timer Driver Input Timing


  801 00000390 F7FF FFFE       BL               InitQueue   ;Initialize the RxQ
                                                            
  802 00000394         
  803 00000394 4885            LDR              R0,=SIM_SOPT2
  804 00000396 4986            LDR              R1,=SIM_SOPT2_UART0SRC_MASK
  805 00000398 6802            LDR              R2,[R0,#0]
  806 0000039A 438A            BICS             R2,R2,R1
  807 0000039C 4985            LDR              R1,=SIM_SOPT2_UART0_MCGPLLCLK_D
IV2
  808 0000039E 430A            ORRS             R2,R2,R1
  809 000003A0 6002            STR              R2,[R0,#0]
  810 000003A2         ;Enable external connection for UART0
  811 000003A2 4885            LDR              R0,=SIM_SOPT5
  812 000003A4 4985            LDR              R1,=SIM_SOPT5_UART0_EXTERN_MASK
_CLEAR
  813 000003A6 6802            LDR              R2,[R0,#0]
  814 000003A8 438A            BICS             R2,R2,R1
  815 000003AA 6002            STR              R2,[R0,#0]
  816 000003AC         ;Enable clock for UART0 module
  817 000003AC 4884            LDR              R0,=SIM_SCGC4
  818 000003AE 4985            LDR              R1,=SIM_SCGC4_UART0_MASK
  819 000003B0 6802            LDR              R2,[R0,#0]
  820 000003B2 430A            ORRS             R2,R2,R1
  821 000003B4 6002            STR              R2,[R0,#0]
  822 000003B6         ;Enable clock for Port A module  
  823 000003B6 4868            LDR              R0,=SIM_SCGC5
  824 000003B8 4983            LDR              R1,=SIM_SCGC5_PORTA_MASK
  825 000003BA 6802            LDR              R2,[R0,#0]
  826 000003BC 430A            ORRS             R2,R2,R1
  827 000003BE 6002            STR              R2,[R0,#0]
  828 000003C0         ;Connect PORT A Pin 1 (PTA) to UART0 Rx (J1 Pin 02)
  829 000003C0 4882            LDR              R0,=PORTA_PCR1
  830 000003C2 4983            LDR              R1,=PORT_PCR_SET_PTA1_UART0_RX
  831 000003C4 6001            STR              R1,[R0,#0]
  832 000003C6         ;Connect PORT A Pin 2 (PTA2) to UART0 Tx (J1 Pin 04)
  833 000003C6 4883            LDR              R0,=PORTA_PCR2
  834 000003C8 4981            LDR              R1,=PORT_PCR_SET_PTA2_UART0_TX
  835 000003CA 6001            STR              R1,[R0,#0]
  836 000003CC         ;Disable UART0 receiver and transmitter
  837 000003CC 486E            LDR              R0,=UART0_BASE
  838 000003CE 212C            MOVS             R1,#UART0_C2_T_RI
  839 000003D0 78C2            LDRB             R2,[R0,#UART0_C2_OFFSET]
  840 000003D2 438A            BICS             R2,R2,R1
  841 000003D4 70C2            STRB             R2,[R0,#UART0_C2_OFFSET]
  842 000003D6         
  843 000003D6 4880            LDR              R0,=UART0_IPR
  844 000003D8 4A80            LDR              R2,=NVIC_IPR_UART0_PRI_3
  845 000003DA 6803            LDR              R3,[R0,#0]
  846 000003DC 4313            ORRS             R3,R3,R2
  847 000003DE 6003            STR              R3,[R0,#0]
  848 000003E0         ;Clear any pending UART0 interrupts
  849 000003E0 487F            LDR              R0,=NVIC_ICPR
  850 000003E2 4980            LDR              R1,=NVIC_ICPR_UART0_MASK
  851 000003E4 6001            STR              R1,[R0,#0]
  852 000003E6         ;Unmask UART0 interrupts
  853 000003E6 4880            LDR              R0,=NVIC_ISER
  854 000003E8 497E            LDR              R1,=NVIC_ISER_UART0_MASK
  855 000003EA 6001            STR              R1,[R0,#0]
  856 000003EC         



ARM Macro Assembler    Page 23 Lab Exercise Ten: Timer Driver Input Timing


  857 000003EC 4866            LDR              R0,=UART0_BASE
  858 000003EE         ;Set UART0 for 9600 baud, 8N1 protocol 
  859 000003EE 2101            MOVS             R1,#UART0_BDH_9600
  860 000003F0 7001            STRB             R1,[R0,#UART0_BDH_OFFSET]
  861 000003F2 2138            MOVS             R1,#UART0_BDL_9600
  862 000003F4 7041            STRB             R1,[R0,#UART0_BDL_OFFSET]
  863 000003F6 2100            MOVS             R1,#UART0_C1_8N1
  864 000003F8 7081            STRB             R1,[R0,#UART0_C1_OFFSET]
  865 000003FA 2100            MOVS             R1,#UART0_C3_NO_TXINV
  866 000003FC 7181            STRB             R1,[R0,#UART0_C3_OFFSET]
  867 000003FE 210F            MOVS             R1,#UART0_C4_NO_MATCH_OSR_16
  868 00000400 7281            STRB             R1,[R0,#UART0_C4_OFFSET]
  869 00000402 2100            MOVS             R1,#UART0_C5_NO_DMA_SSR_SYNC
  870 00000404 72C1            STRB             R1,[R0,#UART0_C5_OFFSET]
  871 00000406 211F            MOVS             R1,#UART0_S1_CLEAR_FLAGS
  872 00000408 7101            STRB             R1,[R0,#UART0_S1_OFFSET]
  873 0000040A 21C0            MOVS             R1,#UART0_S2_NO_RXINV_BRK10_NO_
LBKDETECT_CLEAR_FLAGS
  874 0000040C 7141            STRB             R1,[R0,#UART0_S2_OFFSET]
  875 0000040E         ;Enable UART0 reciever and transmitter
  876 0000040E 212C            MOVS             R1,#UART0_C2_T_RI
  877 00000410 70C1            STRB             R1,[R0,#UART0_C2_OFFSET]
  878 00000412 BD0F            POP              {R0-R3, PC}
  879 00000414                 ENDP
  880 00000414         
  881 00000414         
  882 00000414         ;This subroutine initializes the PIT so that a clock wil
                       l be set to count 
  883 00000414         ;once every 10 ms (.01 seconds). 
  884 00000414         Init_PIT_IRQ
                               PROC             {R0-R14},{}
  885 00000414         
  886 00000414 B40F            PUSH             {R0-R3}
  887 00000416 4875            LDR              R0,=SIM_SCGC6
  888 00000418 4975            LDR              R1,=SIM_SCGC6_PIT_MASK
  889 0000041A 6802            LDR              R2,[R0,#0]  ;current SIM_SCGC6 
                                                            value
  890 0000041C 430A            ORRS             R2,R2,R1    ;only PIT bit set
  891 0000041E 6002            STR              R2,[R0,#0]  ;update SIM_SCGC6
  892 00000420         
  893 00000420         ;Disable PIT timer to 0
  894 00000420 4874            LDR              R0,=PIT_CH0_BASE
  895 00000422 6801            LDR              R1,[R0,#0]
  896 00000424 4A74            LDR              R2,=PIT_TCTRL_CH_IE
  897 00000426 4391            BICS             R1,R1,R2
  898 00000428 6001            STR              R1,[R0,#0]
  899 0000042A         
  900 0000042A         ;Set PIT IRQ priority to 0
  901 0000042A 4874            LDR              R0,=PIT_IPR
  902 0000042C 495B            LDR              R1,=PIT_IRQ_PR1
  903 0000042E         ;LDR   R2,=(PIT_IRQ_PR1 << PIT_PR1_POS)
  904 0000042E 6001            STR              R1,[R0,#0]
  905 00000430         ;BICS  R3,R3,R1
  906 00000430         ;ORRS  R3,R3,R2
  907 00000430         ;STR    R3,[R0,#0]
  908 00000430         
  909 00000430         ;Allows timers to be stopped in debug mode
  910 00000430 4874            LDR              R0,=PIT_BASE
  911 00000432 4975            LDR              R1,=PIT_MCR_EN_FRZ



ARM Macro Assembler    Page 24 Lab Exercise Ten: Timer Driver Input Timing


  912 00000434 6001            STR              R1,[R0,#PIT_MCR_OFFSET]
  913 00000436         
  914 00000436         ;Clear PIT Channel 0 interrupt
  915 00000436 486F            LDR              R0,=PIT_CH0_BASE
  916 00000438 4973            LDR              R1,=PIT_TFLG_TIF_MASK
  917 0000043A 60C1            STR              R1,[R0,#PIT_TFLG_OFFSET]
  918 0000043C         
  919 0000043C         ;Unmask PIT interrupts
  920 0000043C 486A            LDR              R0,=NVIC_ISER
  921 0000043E 4973            LDR              R1,=PIT_IRQ_MASK
  922 00000440 6001            STR              R1,[R0,#0]
  923 00000442         
  924 00000442         ;Enable PIT module
  925 00000442 4870            LDR              R0,=PIT_MCR
  926 00000444 6801            LDR              R1,[R0,#0]
  927 00000446 2202            MOVS             R2,#2_00000010
  928 00000448 4391            BICS             R1,R1,R2
  929 0000044A 6001            STR              R1,[R0,#0]
  930 0000044C         
  931 0000044C         
  932 0000044C         ;Set PIT timer 0 period for 0.01s
  933 0000044C 4869            LDR              R0,=PIT_CH0_BASE
  934 0000044E 4970            LDR              R1,=PIT_LDVAL_10ms
  935 00000450 6001            STR              R1,[R0,#PIT_LDVAL_OFFSET]
  936 00000452         
  937 00000452         ;Enable PIT timer 0 with interrupt
  938 00000452 4868            LDR              R0,=PIT_CH0_BASE
  939 00000454 2103            MOVS             R1,#PIT_TCTRL_CH_IE
  940 00000456 6081            STR              R1,[R0,#PIT_TCTRL_OFFSET]
  941 00000458         
  942 00000458 BC0F            POP              {R0-R3}
  943 0000045A 4770            BX               LR
  944 0000045C                 ENDP
  945 0000045C         
  946 0000045C         ;This is where the interrupt for the PIT_ISR leads to. T
                       his section of code handles running and
  947 0000045C         ;incrementing a variable named Count that is incremented
                        once every 10 ms, assuming that the 
  948 0000045C         ;stop watch is running. In either case, where the stopwa
                       tch is running or if it isn't, the PIT
  949 0000045C         ;Channel 0 interrupt is cleared so that the program can 
                       continue as it was before the interrupt.
  950 0000045C         PIT_ISR PROC             {R0-R14}, {}
  951 0000045C         
  952 0000045C B403            PUSH             {R0-R1}     ;Saves the values i
                                                            n registers R0-R1
  953 0000045E 4850            LDR              R0,=RunStopWatch ;R0 gets the a
                                                            ddress of the varia
                                                            ble RunStopWatch
  954 00000460 7800            LDRB             R0,[R0,#0]  ;R0 gets the value 
                                                            of the variable Run
                                                            StopWatch
  955 00000462 2800            CMP              R0,#0       ;Comparing the valu
                                                            e of RunStopWatch t
                                                            o 0
  956 00000464 D003            BEQ              ClearInterrupt ;If RunStopWatch
                                                             is 0, go to ClearI
                                                            nterrupt
  957 00000466 4845            LDR              R0,=Count   ;Otherwise, R0 gets



ARM Macro Assembler    Page 25 Lab Exercise Ten: Timer Driver Input Timing


                                                             the address of the
                                                             variable Count
  958 00000468 6801            LDR              R1,[R0,#0]  ;R1 gets the value 
                                                            of Count
  959 0000046A 1C49            ADDS             R1,R1,#1    ;Increment R1 by 1
  960 0000046C 6001            STR              R1,[R0,#0]  ;Store the new valu
                                                            e of Count into the
                                                             address of Count
  961 0000046E         ;Go to ClearInterrupt
  962 0000046E         ClearInterrupt
  963 0000046E         
  964 0000046E         ;Clear Pit Channel 0 interrupt 
  965 0000046E 4861            LDR              R0,=PIT_CH0_BASE
  966 00000470 4965            LDR              R1,=PIT_TFLG_TIF_MASK
  967 00000472 60C1            STR              R1,[R0,#PIT_TFLG_OFFSET]
  968 00000474         
  969 00000474 BC03            POP              {R0-R1}     ;Restores the value
                                                            s of registers R0-R
                                                            1
  970 00000476 4770            BX               LR
  971 00000478                 ENDP
  972 00000478         
  973 00000478         
  974 00000478         
  975 00000478         ;No input parameters.
  976 00000478         ;Prints out a new line to the terminal. 
  977 00000478         NewLine PROC             {R0-R14}, {}
  978 00000478         ;Keep
  979 00000478 B501            PUSH             {R0, LR}
  980 0000047A 200A            MOVS             R0,#0x0A    ;Move the value hex
                                                             A into R0, which i
                                                            s the ascii value f
                                                            or NL, or new line.
                                                            
  981 0000047C F7FF FFFE       BL               PutChar     ;Print the value of
                                                             the ascii number i
                                                            n R0 to the screen,
                                                             so a new line is p
                                                            rinted. 
  982 00000480 200D            MOVS             R0,#0x0D    ;Move the value hex
                                                             D into R0, which i
                                                            s the ascii value f
                                                            or CR, or carriage 
                                                            return.
  983 00000482 F7FF FFFE       BL               PutChar     ;Print the value of
                                                             the ascii number i
                                                            n R0 to the screen,
                                                             so the carriage re
                                                            turn is printed. 
  984 00000486 BD01            POP              {R0, PC}
  985 00000488                 ENDP
  986 00000488         
  987 00000488         
  988 00000488         GetRandomNumber
                               PROC             {R1-R14}
  989 00000488         
  990 00000488 B50D            PUSH             {R0,R2-R3, LR}
  991 0000048A F3EF 8000       MRS              R0,APSR     ;The following line
                                                            s clear the C flag 



ARM Macro Assembler    Page 26 Lab Exercise Ten: Timer Driver Input Timing


                                                            without changing ot
                                                            her values
  992 0000048E 2120            MOVS             R1,#0x20
  993 00000490 0609            LSLS             R1,R1,#24
  994 00000492 4388            BICS             R0,R0,R1
  995 00000494 F380 8800       MSR              APSR,R0
  996 00000498 4A38            LDR              R2,=Count
  997 0000049A 6812            LDR              R2,[R2,#0]
  998 0000049C 0011            MOVS             R1,R2
  999 0000049E 2004            MOVS             R0,#4
 1000 000004A0         
 1001 000004A0 F7FF FFFE       BL               DIVU
 1002 000004A4 0008            MOVS             R0,R1
 1003 000004A6 2100            MOVS             R1,#0
 1004 000004A8 4A34            LDR              R2,=Count
 1005 000004AA 6011            STR              R1,[R2,#0]
 1006 000004AC 0001            MOVS             R1,R0
 1007 000004AE BD0D            POP              {R0,R2-R3, PC}
 1008 000004B0                 ENDP
 1009 000004B0         
 1010 000004B0         ;This subroutine initializes the queue. It sets the InPo
                       inter and OutPointer
 1011 000004B0         ;both to point at the beginning of QBuffer. BufferStart 
                       is the address at the 
 1012 000004B0         ;start of QBuffer. BufferSize is the total size that the
                        queue can hold. Before
 1013 000004B0         ;anything is added to the queue, the total size of the q
                       ueue is 0, so 
 1014 000004B0         ;NumberEnqueue is set to equal 0. 
 1015 000004B0         ;Input Parameters:
 1016 000004B0         ;R0 : Buffer of Queue being initialized
 1017 000004B0         ;R1 : Queue being initialized
 1018 000004B0         ;R2 : Size of buffer
 1019 000004B0         InitQueue
                               PROC             {R0-R14}, {}
 1020 000004B0         
 1021 000004B0 B407            PUSH             {R0-R2}
 1022 000004B2         ;LDR   R0,=QBuffer 
 1023 000004B2         ;LDR   R1,=QRecord 
 1024 000004B2 6008            STR              R0,[R1,#IN_PTR]
 1025 000004B4 6048            STR              R0,[R1,#OUT_PTR]
 1026 000004B6 6088            STR              R0,[R1,#BUF_STRT]
 1027 000004B8         ;MOVS  R2,#Q_BUF_SZ 
 1028 000004B8 1880            ADDS             R0,R0,R2
 1029 000004BA 60C8            STR              R0,[R1,#BUF_PAST]
 1030 000004BC 740A            STRB             R2,[R1,#BUF_SIZE]
 1031 000004BE 2000            MOVS             R0,#0
 1032 000004C0 7448            STRB             R0,[R1,#NUM_ENQD]
 1033 000004C2 BC07            POP              {R0-R2}
 1034 000004C4 4770            BX               LR
 1035 000004C6                 ENDP
 1036 000004C6         
 1037 000004C6         ;This subroutine removes a character from the queue (FIF
                       O). If there are no characters
 1038 000004C6         ;to remove from the queue, the C flag is set. 
 1039 000004C6         ;Input Parameters:
 1040 000004C6         ;R1: Pointer to QRecord
 1041 000004C6         ;Output:
 1042 000004C6         ;R0: Character DeQueued



ARM Macro Assembler    Page 27 Lab Exercise Ten: Timer Driver Input Timing


 1043 000004C6         ;C (flag of PSR): success(0) or failure(1) of dequeue
 1044 000004C6         ;Modify: R0,APSR
 1045 000004C6         ;Other registers remain unchanged on return
 1046 000004C6         DeQueue PROC             {R1 - R14}, {}
 1047 000004C6         ;Keep
 1048 000004C6 B47E            PUSH             {R1-R6}     ;Save values of reg
                                                            isters 1-6
 1049 000004C8 7C4C            LDRB             R4,[R1,#NUM_ENQD] ;R4 gets the 
                                                            total size of the Q
                                                            ueue
 1050 000004CA 2C00            CMP              R4,#0       ;Compare the size o
                                                            f the Queue to 0
 1051 000004CC DD14            BLE              SetCDeQ     ;If R4 <= 0, go to 
                                                            SetC
 1052 000004CE         
 1053 000004CE 684B            LDR              R3,[R1,#OUT_PTR] ;R3 gets the v
                                                            alue the starting a
                                                            ddress of the Queue
                                                             plus an offset of 
                                                            the value of OUT_PT
                                                            R    
 1054 000004D0 781E            LDRB             R6,[R3,#0]  ;R0 gets the value 
                                                            being dequeued
 1055 000004D2 1E64            SUBS             R4,R4,#1    ;Decrement the size
                                                             of the Queue
 1056 000004D4 744C            STRB             R4,[R1,#NUM_ENQD] ;Store the ne
                                                            w size of the Queue
                                                            
 1057 000004D6 68CD            LDR              R5,[R1,#BUF_PAST] ;R5 gets the 
                                                            address value at th
                                                            e address just past
                                                             the last queue val
                                                            ue
 1058 000004D8 1C5B            ADDS             R3,R3,#1    ;Increment the OutP
                                                            ointer past the que
                                                            ue item
 1059 000004DA 604B            STR              R3,[R1,#OUT_PTR]
 1060 000004DC 42AB            CMP              R3,R5       ;Compares the OutPo
                                                            inter to the addres
                                                            s value of the queu
                                                            e buffer
 1061 000004DE D000            BEQ              AdjustPTRDeQ ;If the OutPointer
                                                             is outside of the 
                                                            queue, go to Adjust
                                                            PTR
 1062 000004E0 E002            B                ClearCDeQ   ;Else, go to ClearC
                                                            
 1063 000004E2         
 1064 000004E2         AdjustPTRDeQ
 1065 000004E2 688C            LDR              R4,[R1,#BUF_STRT]
 1066 000004E4 604C            STR              R4,[R1,#OUT_PTR] ;Set the addre
                                                            ss into R3 to the a
                                                            ddress at the start
                                                             of the queue
 1067 000004E6 E7FF            B                ClearCDeQ
 1068 000004E8         
 1069 000004E8         ClearCDeQ
 1070 000004E8 F3EF 8000       MRS              R0,APSR     ;The following line
                                                            s clear the C flag



ARM Macro Assembler    Page 28 Lab Exercise Ten: Timer Driver Input Timing


 1071 000004EC 2120            MOVS             R1,#0x20
 1072 000004EE 0609            LSLS             R1,R1,#24
 1073 000004F0 4388            BICS             R0,R0,R1
 1074 000004F2 F380 8800       MSR              APSR,R0
 1075 000004F6 E007            B                EndDequeue
 1076 000004F8         
 1077 000004F8         SetCDeQ
 1078 000004F8 F3EF 8000       MRS              R0,APSR     ;The following line
                                                            s set the C flag
 1079 000004FC 2120            MOVS             R1,#0x20
 1080 000004FE 0609            LSLS             R1,R1,#24
 1081 00000500 4308            ORRS             R0,R0,R1
 1082 00000502 F380 8800       MSR              APSR,R0
 1083 00000506 E7FF            B                EndDequeue
 1084 00000508         
 1085 00000508         EndDequeue
 1086 00000508 0030            MOVS             R0,R6
 1087 0000050A BC7E            POP              {R1-R6}     ;Restore values of 
                                                            registers 1-6
 1088 0000050C 4770            BX               LR
 1089 0000050E                 ENDP
 1090 0000050E         
 1091 0000050E         ;This subroutine adds a character to the queue, so long 
                       as there is space left to add it.
 1092 0000050E         ;If there is no more space in the queue to add, the C fl
                       ag is set.
 1093 0000050E         ;Input Parameters:
 1094 0000050E         ;R0: Character EnQueued
 1095 0000050E         ;R1: Pointer to QRecord
 1096 0000050E         ;Output:
 1097 0000050E         ;C (flag of PSR): success(0) or failure(1) of dequeue
 1098 0000050E         ;Modify: APSR
 1099 0000050E         ;Other registers remain unchanged on return
 1100 0000050E         EnQueue PROC             {R1-R14}, {}
 1101 0000050E B43F            PUSH             {R0-R5}     ;Save values of reg
                                                            isters 1-5
 1102 00000510 7C0A            LDRB             R2,[R1,#BUF_SIZE] ;Gets the add
                                                            ress where the buff
                                                            er size is 
 1103 00000512 7C4B            LDRB             R3,[R1,#NUM_ENQD] ;Gets the add
                                                            ress where the tota
                                                            l number of enqueue
                                                            d items is
 1104 00000514 4293            CMP              R3,R2       ;Comparing the buff
                                                            er size to the tota
                                                            l number of enqueue
                                                            d items
 1105 00000516 D214            BHS              SetCEnQ     ;If the number of e
                                                            nqueued items is hi
                                                            gher or the same as
                                                             the size, go to Se
                                                            tC
 1106 00000518         
 1107 00000518 680C            LDR              R4,[R1,#IN_PTR] ;Otherwise, loa
                                                            d the address of th
                                                            e in pointer to reg
                                                            ister R4
 1108 0000051A 7020            STRB             R0,[R4,#0]  ;Store the characte
                                                            r that was enqueued



ARM Macro Assembler    Page 29 Lab Exercise Ten: Timer Driver Input Timing


                                                             into the address w
                                                            ith the in pointer
 1109 0000051C 1C64            ADDS             R4,R4,#1    ;Increment the addr
                                                            ess
 1110 0000051E 600C            STR              R4,[R1,#IN_PTR] ;Store the new 
                                                            incremented address
                                                             of in pointer into
                                                             memory at the in p
                                                            ointer address
 1111 00000520 1C5B            ADDS             R3,R3,#1    ;Increment the tota
                                                            l number of enqueue
                                                            d items
 1112 00000522 744B            STRB             R3,[R1,#NUM_ENQD] ;Store the to
                                                            tal number of enque
                                                            ued items into memo
                                                            ry
 1113 00000524 68CD            LDR              R5,[R1,#BUF_PAST] ;Load the add
                                                            ress of the buffer 
                                                            past into R5
 1114 00000526 42AC            CMP              R4,R5       ;Compare the addres
                                                            ses of in pointer a
                                                            nd buffer past
 1115 00000528 D000            BEQ              AdjustPTREnQ ;If they are equal
                                                            , go to AdjustPTREn
                                                            Q
 1116 0000052A E002            B                ClearCEnQ   ;Otherwise, go to C
                                                            learC
 1117 0000052C         
 1118 0000052C         AdjustPTREnQ
 1119 0000052C 688C            LDR              R4,[R1,#BUF_STRT]
 1120 0000052E 600C            STR              R4,[R1,#IN_PTR] ;Set the addres
                                                            s into R4 to the ad
                                                            dress at the start 
                                                            
 1121 00000530         ;of the queue
 1122 00000530 E7FF            B                ClearCEnQ
 1123 00000532         
 1124 00000532         ClearCEnQ
 1125 00000532 F3EF 8000       MRS              R0,APSR     ;The following line
                                                            s clear the C flag
 1126 00000536 2120            MOVS             R1,#0x20
 1127 00000538 0609            LSLS             R1,R1,#24
 1128 0000053A 4388            BICS             R0,R0,R1
 1129 0000053C F380 8800       MSR              APSR,R0
 1130 00000540 E007            B                EndEnQueue
 1131 00000542         
 1132 00000542         SetCEnQ
 1133 00000542 F3EF 8000       MRS              R0,APSR     ;The following line
                                                            s set the C flag
 1134 00000546 2120            MOVS             R1,#0x20
 1135 00000548 0609            LSLS             R1,R1,#24
 1136 0000054A 4308            ORRS             R0,R0,R1
 1137 0000054C F380 8800       MSR              APSR,R0
 1138 00000550 E7FF            B                EndEnQueue
 1139 00000552         
 1140 00000552         EndEnQueue
 1141 00000552 BC3F            POP              {R0-R5}     ;Restore values of 
                                                            registers 1-5
 1142 00000554 4770            BX               LR



ARM Macro Assembler    Page 30 Lab Exercise Ten: Timer Driver Input Timing


 1143 00000556                 ENDP
 1144 00000556         
 1145 00000556         ;>>>>>   end subroutine code <<<<<
 1146 00000556 00 00           ALIGN
 1147 00000558         ;*******************************************************
                       *********
 1148 00000558         ;Vector Table Mapped to Address 0 at Reset
 1149 00000558         ;Linker requires __Vectors to be exported
 1150 00000558 40048038 
              00003000 
              4004D000 
              01000100 
              4004C000 
              F80FF0C0 
              00000020 
              F80FF100 
              20000000 
              00000000 
              00000000 
              00000000 
              4006A000 
              4006A003 
              4006A004 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              40048004 
              0C000000 
              04010000 
              40048010 
              00010007 
              40048034 
              00000400 
              00000200 
              40049004 
              01000200 
              40049008 
              E000E40C 
              000000C0 
              E000E280 
              00001000 
              E000E100 
              4004803C 
              00800000 
              40037100 
              00000003 
              E000E414 
              00000000 
              40037000 
              00000001 
              00400000 
              0003A97F 
              00000000 
              00000000 
              00000000 
              00000000         AREA             RESET, DATA, READONLY



ARM Macro Assembler    Page 31 Lab Exercise Ten: Timer Driver Input Timing


 1151 00000000                 EXPORT           __Vectors
 1152 00000000                 EXPORT           __Vectors_End
 1153 00000000                 EXPORT           __Vectors_Size
 1154 00000000                 IMPORT           __initial_sp
 1155 00000000                 IMPORT           Dummy_Handler
 1156 00000000                 IMPORT           HardFault_Handler
 1157 00000000         __Vectors
 1158 00000000         
 1159 00000000         ;ARM core vectors
 1160 00000000 00000000        DCD              __initial_sp ;00:end of stack
 1161 00000004 00000000        DCD              Reset_Handler ;01:reset vector
 1162 00000008 00000000        DCD              Dummy_Handler ;02:NMI
 1163 0000000C 00000000        DCD              HardFault_Handler 
                                                            ;03:hard fault
 1164 00000010 00000000        DCD              Dummy_Handler ;04:(reserved)
 1165 00000014 00000000        DCD              Dummy_Handler ;05:(reserved)
 1166 00000018 00000000        DCD              Dummy_Handler ;06:(reserved)
 1167 0000001C 00000000        DCD              Dummy_Handler ;07:(reserved)
 1168 00000020 00000000        DCD              Dummy_Handler ;08:(reserved)
 1169 00000024 00000000        DCD              Dummy_Handler ;09:(reserved)
 1170 00000028 00000000        DCD              Dummy_Handler ;10:(reserved)
 1171 0000002C 00000000        DCD              Dummy_Handler ;11:SVCall (super
                                                            visor call)
 1172 00000030 00000000        DCD              Dummy_Handler ;12:(reserved)
 1173 00000034 00000000        DCD              Dummy_Handler ;13:(reserved)
 1174 00000038 00000000        DCD              Dummy_Handler ;14:PendableSrvRe
                                                            q (pendable request
                                                             
 1175 0000003C         ;   for system service)
 1176 0000003C 00000000        DCD              Dummy_Handler ;15:SysTick (syst
                                                            em tick timer)
 1177 00000040 00000000        DCD              Dummy_Handler ;16:DMA channel 0
                                                             xfer complete/erro
                                                            r
 1178 00000044 00000000        DCD              Dummy_Handler ;17:DMA channel 1
                                                             xfer complete/erro
                                                            r
 1179 00000048 00000000        DCD              Dummy_Handler ;18:DMA channel 2
                                                             xfer complete/erro
                                                            r
 1180 0000004C 00000000        DCD              Dummy_Handler ;19:DMA channel 3
                                                             xfer complete/erro
                                                            r
 1181 00000050 00000000        DCD              Dummy_Handler ;20:(reserved)
 1182 00000054 00000000        DCD              Dummy_Handler ;21:command compl
                                                            ete; read collision
                                                            
 1183 00000058 00000000        DCD              Dummy_Handler ;22:low-voltage d
                                                            etect;
 1184 0000005C         ;   low-voltage warning
 1185 0000005C 00000000        DCD              Dummy_Handler ;23:low leakage w
                                                            akeup
 1186 00000060 00000000        DCD              Dummy_Handler ;24:I2C0
 1187 00000064 00000000        DCD              Dummy_Handler ;25:I2C1
 1188 00000068 00000000        DCD              Dummy_Handler ;26:SPI0 (all IRQ
                                                             sources)
 1189 0000006C 00000000        DCD              Dummy_Handler ;27:SPI1 (all IRQ
                                                             sources)
 1190 00000070 00000000        DCD              UART0_ISR   ;28:UART0 (status; 



ARM Macro Assembler    Page 32 Lab Exercise Ten: Timer Driver Input Timing


                                                            error)
 1191 00000074 00000000        DCD              Dummy_Handler ;29:UART1 (status
                                                            ; error)
 1192 00000078 00000000        DCD              Dummy_Handler ;30:UART2 (status
                                                            ; error)
 1193 0000007C 00000000        DCD              Dummy_Handler ;31:ADC0
 1194 00000080 00000000        DCD              Dummy_Handler ;32:CMP0
 1195 00000084 00000000        DCD              Dummy_Handler ;33:TPM0
 1196 00000088 00000000        DCD              Dummy_Handler ;34:TPM1
 1197 0000008C 00000000        DCD              Dummy_Handler ;35:TPM2
 1198 00000090 00000000        DCD              Dummy_Handler ;36:RTC (alarm)
 1199 00000094 00000000        DCD              Dummy_Handler ;37:RTC (seconds)
                                                            
 1200 00000098 00000000        DCD              PIT_ISR     ;38:PIT (all IRQ so
                                                            urces)
 1201 0000009C 00000000        DCD              Dummy_Handler ;39:I2S0
 1202 000000A0 00000000        DCD              Dummy_Handler ;40:USB0
 1203 000000A4 00000000        DCD              Dummy_Handler ;41:DAC0
 1204 000000A8 00000000        DCD              Dummy_Handler ;42:TSI0
 1205 000000AC 00000000        DCD              Dummy_Handler ;43:MCG
 1206 000000B0 00000000        DCD              Dummy_Handler ;44:LPTMR0
 1207 000000B4 00000000        DCD              Dummy_Handler ;45:Segment LCD
 1208 000000B8 00000000        DCD              Dummy_Handler ;46:PORTA pin det
                                                            ect
 1209 000000BC 00000000        DCD              Dummy_Handler ;47:PORTC and POR
                                                            TD pin detect
 1210 000000C0         __Vectors_End
 1211 000000C0 000000C0 
                       __Vectors_Size
                               EQU              __Vectors_End - __Vectors
 1212 000000C0                 ALIGN
 1213 000000C0         ;*******************************************************
                       *********
 1214 000000C0         ;Constants
 1215 000000C0         
 1216 000000C0                 AREA             MyConst,DATA,READONLY
 1217 00000000         ;>>>>> begin constants here <<<<<
 1218 00000000 0D 57 65 
              6C 63 6F 
              6D 65 20 
              74 6F 20 
              43 6F 6C 
              6F 72 20 
              4D 61 74 
              63 68 21 
              0A 0D 00 Welcome DCB              0x0D, "Welcome to Color Match!"
,0x0A,0x0D,0
 1219 0000001B 0D 50 72 
              65 73 73 
              20 27 45 
              6E 74 65 
              72 27 20 
              74 6F 20 
              73 74 61 
              72 74 20 
              61 6E 64 
              20 27 52 
              27 20 66 
              6F 72 20 



ARM Macro Assembler    Page 33 Lab Exercise Ten: Timer Driver Input Timing


              72 75 6C 
              65 73 2E 
              0A 0D 00 beginningPrompt
                               DCB              0x0D,"Press 'Enter' to start an
d 'R' for rules.", 0x0A, 0x0D, 0
 1220 00000048 0D 52 55 
              4C 45 53 
              3A 0A 0D 
              4C 45 44 
              53 73 20 
              77 69 6C 
              6C 20 6C 
              69 67 68 
              74 20 75 
              70 20 6F 
              6E 20 74 
              68 65 20 
              6D 69 63 
              72 6F 63 
              6F 6E 74 
              72 6F 6C 
              6C 65 72 
              20 6F 6E 
              63 65 20 
              74 68 65 
              20 67 61 
              6D 65 20 
              62 65 67 
              69 6E 73 
              2E 0A 0D 
              00       helpCommands
                               DCB              0x0D, "RULES:", 0x0A, 0x0D, "LE
DSs will light up on the microcontroller once the game begins.", 0x0A, 0x0D, 0
 1221 00000094 0D 50 72 
              65 73 73 
              20 27 52 
              27 20 69 
              66 20 74 
              68 65 20 
              72 65 64 
              20 4C 45 
              44 20 69 
              73 20 6C 
              69 74 20 
              61 6E 64 
              20 27 47 
              27 20 69 
              66 20 74 
              68 65 20 
              67 72 65 
              65 6E 20 
              4C 45 44 
              20 69 73 
              20 6C 69 
              74 2E 0A 
              0D 00    helpCommands2
                               DCB              0x0D, "Press 'R' if the red LED
 is lit and 'G' if the green LED is lit.", 0x0A, 0x0D, 0
 1222 000000D8 0D 49 66 



ARM Macro Assembler    Page 34 Lab Exercise Ten: Timer Driver Input Timing


              20 62 6F 
              74 68 20 
              61 72 65 
              20 6C 69 
              74 2C 20 
              70 72 65 
              73 73 20 
              27 42 27 
              20 61 6E 
              64 20 69 
              66 20 6E 
              65 69 74 
              68 65 72 
              20 61 72 
              65 20 6C 
              69 74 2C 
              20 70 72 
              65 73 73 
              20 27 4E 
              27 2E 0A 
              0D 00    helpCommands3
                               DCB              0x0D, "If both are lit, press '
B' and if neither are lit, press 'N'.", 0x0A, 0x0D, 0
 1223 00000119 0D 57 72 
              6F 6E 67 
              20 61 6E 
              73 77 65 
              72 73 20 
              72 65 64 
              75 63 65 
              20 74 68 
              65 20 76 
              61 6C 75 
              65 20 6F 
              66 20 67 
              65 74 74 
              69 6E 67 
              20 74 68 
              65 20 72 
              69 67 68 
              74 20 61 
              6E 73 77 
              65 72 2E 
              0A 0D 00 helpCommands4
                               DCB              0x0D, "Wrong answers reduce the
 value of getting the right answer.", 0x0A, 0x0D, 0
 1224 00000158 0D 54 68 
              65 20 66 
              75 72 74 
              68 65 72 
              20 74 68 
              65 20 72 
              6F 75 6E 
              64 2C 20 
              74 68 65 
              20 66 61 
              73 74 65 
              72 20 61 
              6E 64 20 



ARM Macro Assembler    Page 35 Lab Exercise Ten: Timer Driver Input Timing


              68 61 72 
              64 65 72 
              20 74 68 
              65 20 67 
              61 6D 65 
              20 67 65 
              74 73 2E 
              0A 0D 00 helpCommands5
                               DCB              0x0D, "The further the round, t
he faster and harder the game gets.", 0x0A, 0x0D, 0
 1225 00000197 0D 54 68 
              65 20 66 
              61 73 74 
              65 72 20 
              74 68 65 
              20 63 6F 
              72 72 65 
              63 74 20 
              61 6E 73 
              77 65 72 
              2C 20 74 
              68 65 20 
              6D 6F 72 
              65 20 70 
              6F 69 6E 
              74 73 20 
              79 6F 75 
              20 67 65 
              74 21 20 
              47 6F 6F 
              64 20 4C 
              75 63 6B 
              21 0A 0D 
              00       helpCommands6
                               DCB              0x0D, "The faster the correct a
nswer, the more points you get! Good Luck!", 0x0A, 0x0D, 0
 1226 000001DD         
 1227 000001DD 3A 20 20 
              20 43 6F 
              72 72 65 
              63 74 2D 
              2D 63 6F 
              6C 6F 72 
              20 77 61 
              73 20 00 correct DCB              ":   Correct--color was ", 0
 1228 000001F5 3A 20 20 
              20 57 72 
              6F 6E 67 
              0A 0D 00 wrong   DCB              ":   Wrong", 0x0A, 0x0D, 0
 1229 00000201 3A 20 20 
              20 4F 75 
              74 20 6F 
              66 20 74 
              69 6D 65 
              2D 2D 63 
              6F 6C 6F 
              72 20 77 
              61 73 20 
              00       outOfTime



ARM Macro Assembler    Page 36 Lab Exercise Ten: Timer Driver Input Timing


                               DCB              ":   Out of time--color was ", 
0
 1230 0000021D 72 65 64 
              0D 0A 00 red     DCB              "red", 0x0D, 0x0A, 0
 1231 00000223 67 72 65 
              65 6E 0D 
              0A 00    green   DCB              "green", 0x0D, 0x0A, 0
 1232 0000022B 62 6F 74 
              68 0D 0A 
              00       both    DCB              "both", 0x0D, 0x0A, 0
 1233 00000232 6E 65 69 
              74 68 65 
              72 0D 0A 
              00       neither DCB              "neither", 0x0D, 0x0A, 0
 1234 0000023C         
 1235 0000023C 43 75 72 
              72 65 6E 
              74 20 53 
              63 6F 72 
              65 3A 20 
              00       currentScore
                               DCB              "Current Score: ", 0
 1236 0000024C 46 69 6E 
              61 6C 20 
              53 63 6F 
              72 65 3A 
              20 00    finalScore
                               DCB              "Final Score: ", 0
 1237 0000025A         
 1238 0000025A 52 6F 75 
              6E 64 20 
              4E 75 6D 
              62 65 72 
              3A 20 00 roundNum
                               DCB              "Round Number: ",0
 1239 00000269         
 1240 00000269         ;>>>>>   end constants here <<<<<
 1241 00000269 00 00 00        ALIGN
 1242 0000026C         ;*******************************************************
                       *********
 1243 0000026C         ;Variables
 1244 0000026C                 AREA             MyData,DATA,READWRITE
 1245 00000000         ;>>>>> begin variables here <<<<<
 1246 00000000         
 1247 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 TransmitQueue
                               SPACE            Q_REC_SZ    ;The TxQ Record
 1248 00000012 00 00           ALIGN
 1249 00000014 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 ReceiveQueue
                               SPACE            Q_REC_SZ    ;The RxQ Record



ARM Macro Assembler    Page 37 Lab Exercise Ten: Timer Driver Input Timing


 1250 00000026 00 00           ALIGN
 1251 00000028 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    QBufferTransmit
                               SPACE            TR_BUF_SZ   ;Buffer for the TxQ
                                                            
 1252 00000078                 ALIGN
 1253 00000078 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    QBufferReceive
                               SPACE            TR_BUF_SZ   ;Buffer for the RxQ



ARM Macro Assembler    Page 38 Lab Exercise Ten: Timer Driver Input Timing


                                                            
 1254 000000C8                 ALIGN
 1255 000000C8 00      RunStopWatch
                               SPACE            1           ;Byte value represe
                                                            nting a stopwatch
 1256 000000C9 00 00 00        ALIGN
 1257 000000CC 00 00 00 
              00       Count   SPACE            4           ;Count value repres
                                                            enting 10 ms for ea
                                                            ch value
 1258 000000D0                 ALIGN
 1259 000000D0 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00       HoldingAddress
                               SPACE            MAX_STRING  ;The address to hol
                                                            d the input string 
                                                            for GetString
 1260 0000011F 00              ALIGN
 1261 00000120 00 00 00 
              00       Score   SPACE            4
 1262 00000124         
 1263 00000124         ;>>>>>   end variables here <<<<<
 1264 00000124                 ALIGN
 1265 00000124                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0+ --apcs=inter
work --depend=.\objects\exercise12.d -o.\objects\exercise12.o -I.\RTE\_Target_1
 -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.6.0\Device\Include -IC:\Keil_v5\
ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SE
TA 524" --predefine="MKL46Z256xxx4 SETA 1" --list=.\listings\exercise12.lst Exe
rcise12.s
